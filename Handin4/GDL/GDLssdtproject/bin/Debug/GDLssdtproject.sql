/*
Deployment script for GDL.Model.GDLContext

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GDL.Model.GDLContext"
:setvar DefaultFilePrefix "GDL.Model.GDLContext"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[Trigger_Readings2]...';


GO
DROP TRIGGER [dbo].[Trigger_Readings2];


GO
PRINT N'Altering [dbo].[Trigger_Readings]...';


GO

ALTER TRIGGER [dbo].[Trigger_Readings]
    ON [dbo].[Readings]
    FOR UPDATE
    AS
    BEGIN
        DECLARE @LogString VARCHAR(100)
		DECLARE @LogString1 VARCHAR(100)
		SELECT @LogString= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From deleted)
		SELECT @LogString1= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From inserted)
		Insert into dbo.LogTable(Operation, LogEntry, LogEntry2) VALUES ('Updated',@LogString,@LogString1);
    END
GO
PRINT N'Creating [dbo].[Trigger_Readings_1]...';


GO

CREATE TRIGGER [dbo].[Trigger_Readings_1]
    ON [dbo].[Readings]
    FOR DELETE
    AS
    BEGIN
        DECLARE @LogString VARCHAR(100)
		SELECT @LogString= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From deleted)
		Insert into dbo.LogTable(Operation, LogEntry) VALUES ('Deleted',@LogString);
    END
GO
PRINT N'Creating [dbo].[Trigger_Readings_2]...';


GO

CREATE TRIGGER [dbo].[Trigger_Readings_2]
    ON [dbo].[Readings]
    FOR INSERT
    AS
    BEGIN
		DECLARE @LogString1 VARCHAR(100)
		SELECT @LogString1= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From inserted)
		Insert into dbo.LogTable(Operation, LogEntry2) VALUES ('Inserted',@LogString1);
    END
GO
PRINT N'Update complete.';


GO
