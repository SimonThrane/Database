/*
Deployment script for I4DAB-HandIn4

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "I4DAB-HandIn4"
:setvar DefaultFilePrefix "I4DAB-HandIn4"
:setvar DefaultDataPath "C:\Users\kaspe\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\kaspe\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[ReadingsTable]...';


GO
CREATE TYPE [dbo].[ReadingsTable] AS TABLE (
    [ReadingId]    INT        NULL,
    [sensorId]     INT        NULL,
    [appartmentId] INT        NULL,
    [value]        FLOAT (53) NULL,
    [timestamp]    DATETIME   NULL);


GO
PRINT N'Creating [dbo].[LogTable]...';


GO
CREATE TABLE [dbo].[LogTable] (
    [Operation] NVARCHAR (50)  NULL,
    [LogEntry]  NVARCHAR (100) NULL,
    [LogEntry2] NVARCHAR (100) NULL,
    [ID]        BIGINT         IDENTITY (1, 1) NOT NULL
);


GO
PRINT N'Creating [dbo].[Trigger_Readings]...';


GO

CREATE TRIGGER [dbo].[Trigger_Readings]
    ON [dbo].[Readings]
    FOR UPDATE
    AS
    BEGIN
        DECLARE @LogString VARCHAR(100)
		DECLARE @LogString1 VARCHAR(100)
		SELECT @LogString= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From deleted)
		SELECT @LogString1= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From inserted)
		Insert into dbo.LogTable(Operation, LogEntry, LogEntry2) VALUES ('Updated',@LogString,@LogString1);
    END
GO
PRINT N'Creating [dbo].[Trigger_Readings_1]...';


GO

CREATE TRIGGER [dbo].[Trigger_Readings_1]
    ON [dbo].[Readings]
    FOR DELETE
    AS
    BEGIN
        DECLARE @LogString VARCHAR(100)
		SELECT @LogString= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From deleted)
		Insert into dbo.LogTable(Operation, LogEntry) VALUES ('Deleted',@LogString);
    END
GO
PRINT N'Creating [dbo].[Trigger_Readings_2]...';


GO

CREATE TRIGGER [dbo].[Trigger_Readings_2]
    ON [dbo].[Readings]
    FOR INSERT
    AS
    BEGIN
		DECLARE @LogString1 VARCHAR(100)
		SELECT @LogString1= (SELECT 'ReadingId: ' + cast(ReadingId as varchar) +  ' SensorId: '+ cast(sensorId as varchar) +' AppartmentId: '+ cast(appartmentId as varchar) +' Value: '+ cast(value as varchar) +' Timestamp: ' + cast(timestamp as varchar) From inserted)
		Insert into dbo.LogTable(Operation, LogEntry2) VALUES ('Inserted',@LogString1);
    END
GO
PRINT N'Creating [dbo].[StructuredData]...';


GO
CREATE FUNCTION [dbo].[StructuredData]
(
	@param1 int
)
RETURNS TABLE AS RETURN
(
	SELECT Readings.value, Sensorcharacteristics.unit, Readings.timestamp, Readings.appartmentId FROM Readings INNER JOIN Sensorcharacteristics
	ON Sensorcharacteristics.sensorId = Readings.sensorId WHERE appartmentId = @param1
)
GO
PRINT N'Creating [dbo].[InsertData]...';


GO
CREATE PROCEDURE [dbo].[InsertData]
	@Readings [ReadingsTable] readonly
AS
BEGIN
	INSERT INTO dbo.Readings ([sensorId],[appartmentId], [value],[timestamp])
	SELECT  [sensorId],[appartmentId], [value],[timestamp] FROM @Readings

	END
GO
PRINT N'Creating [dbo].[ReadSensors]...';


GO
CREATE PROCEDURE [dbo].[ReadSensors]
	@param1 int
AS
	SELECT Readings.value, Sensorcharacteristics.unit, Readings.timestamp, Readings.appartmentId FROM Readings INNER JOIN Sensorcharacteristics
	ON Sensorcharacteristics.sensorId = Readings.sensorId WHERE appartmentId = @param1
RETURN
GO
PRINT N'Update complete.';


GO
